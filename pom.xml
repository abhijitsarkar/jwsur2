<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>name.abhijitsarkar.webservices</groupId>
	<artifactId>jwsur2</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>pom</packaging>
	<name>jwsur2</name>
	<description>
    This project is intended to manage the dependencies and plugins for Web Services practice code.
    Run 'mvn clean install' on this project before running individual projects.
  </description>

	<properties>
		<project.build.sourceLevel>1.7</project.build.sourceLevel>
		<project.build.targetLevel>1.7</project.build.targetLevel>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<javaee.version>6.0</javaee.version>
		<jackson.version>2.2.3</jackson.version>
		<jersey.version>2.3.1</jersey.version>
		<jaxws.version>2.2.5</jaxws.version>
		<!-- Maven sets java.home property to JRE but we want JDK -->
		<wsimport.exec>${java.home}/../bin/wsimport</wsimport.exec>
		<jetty.version>9.0.6.v20130930</jetty.version>
		<junit.version>4.12</junit.version>
		<slf4j.version>1.7.10</slf4j.version>
		<logback.version>1.1.2</logback.version>
		<jetty.jvmArgs>-ea -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=4000</jetty.jvmArgs>
	</properties>

	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>commons-codec</groupId>
				<artifactId>commons-codec</artifactId>
				<version>1.8</version>
			</dependency>
			<dependency>
				<groupId>org.apache.httpcomponents</groupId>
				<artifactId>httpclient</artifactId>
				<version>4.3.1</version>
			</dependency>
			
			<!-- Logging dependencies start -->
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-api</artifactId>
				<version>${slf4j.version}</version>
			</dependency>
			<dependency>
				<groupId>ch.qos.logback</groupId>
				<artifactId>logback-classic</artifactId>
				<version>${logback.version}</version>
				<scope>runtime</scope>
				<optional>true</optional>
			</dependency>
			<dependency>
				<groupId>ch.qos.logback</groupId>
				<artifactId>logback-core</artifactId>
				<version>${logback.version}</version>
				<scope>runtime</scope>
				<optional>true</optional>
			</dependency>
			<!-- Logging dependencies end -->
			
			<!-- JAX-WS dependencies start -->
			<dependency>
				<groupId>com.sun.xml.fastinfoset</groupId>
				<artifactId>FastInfoset</artifactId>
				<version>1.2.10</version>
				<scope>runtime</scope>
			</dependency>
			<dependency>
				<groupId>org.glassfish.metro</groupId>
				<artifactId>webservices-rt</artifactId>
				<version>2.1</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>com.sun.xml.ws</groupId>
				<artifactId>jaxws-rt</artifactId>
				<version>${jaxws.version}</version>
			</dependency>
			<!-- JAX-WS dependencies end -->
			
			<!-- JAX-RS dependencies start -->
			<!-- This automagically registers a JSON Provider with Jersey -->
			<dependency>
				<groupId>com.fasterxml.jackson.jaxrs</groupId>
				<artifactId>jackson-jaxrs-json-provider</artifactId>
				<version>${jackson.version}</version>
			</dependency>
			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-databind</artifactId>
				<version>${jackson.version}</version>
			</dependency>
			<dependency>
				<groupId>org.glassfish.jersey.core</groupId>
				<artifactId>jersey-server</artifactId>
				<version>${jersey.version}</version>
			</dependency>
			<dependency>
				<groupId>org.glassfish.jersey.containers</groupId>
				<artifactId>jersey-container-servlet-core</artifactId>
				<version>${jersey.version}</version>
				<scope>runtime</scope>
			</dependency>
			<dependency>
				<groupId>org.glassfish.jersey.test-framework.providers</groupId>
				<artifactId>jersey-test-framework-provider-jdk-http</artifactId>
				<version>${jersey.version}</version>
				<scope>test</scope>
				<optional>true</optional>
			</dependency>
			<!-- JAX-RS dependencies end -->
			<!-- This must be after Jersey else throws weird exception at runtime -->
			<dependency>
				<groupId>javax</groupId>
				<artifactId>javaee-web-api</artifactId>
				<version>${javaee.version}</version>
				<scope>provided</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<configuration>
					<packagingExcludes>WEB-INF/**/wsdl/**,
						WEB-INF/**/xsd/**,
						WEB-INF/*/jaxws-bindings/**</packagingExcludes>
				</configuration>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.jvnet.jax-ws-commons</groupId>
					<artifactId>jaxws-maven-plugin</artifactId>
					<version>2.3</version>
					<configuration>
						<executable>${wsimport.exec}</executable>
						<sourceDestDir>${project.build.sourceDirectory}</sourceDestDir>
						<verbose>true</verbose>
						<target>2.2</target>
					</configuration>
				</plugin>
				<plugin>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.2</version>
					<configuration>
						<compilerVersion>${project.build.sourceLevel}</compilerVersion>
						<source>${project.build.sourceLevel}</source>
						<target>${project.build.targetLevel}</target>
						<encoding>${project.build.sourceEncoding}</encoding>
						<showDeprecation>true</showDeprecation>
						<showWarnings>true</showWarnings>
					</configuration>
				</plugin>
				<plugin>
					<artifactId>maven-resources-plugin</artifactId>
					<version>2.7</version>
					<configuration>
						<encoding>${project.build.sourceEncoding}</encoding>
					</configuration>
				</plugin>
				<plugin>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>2.17</version>
					<configuration>
						<disableXmlReport>true</disableXmlReport>
					</configuration>
				</plugin>
				<plugin>
					<artifactId>maven-war-plugin</artifactId>
					<version>2.4</version>
					<configuration>
						<failOnMissingWebXml>false</failOnMissingWebXml>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.eclipse.jetty</groupId>
					<artifactId>jetty-maven-plugin</artifactId>
					<version>${jetty.version}</version>
					<configuration>
						<webAppConfig>
							<contextPath>/${project.artifactId}</contextPath>
						</webAppConfig>
						<!-- Following are only used in debug mode. Jetty must be started by 
							run-forked goal in order for the JVM debug arguments to take effect -->
						<jvmArgs>${jetty.jvmArgs}</jvmArgs>
						<stopPort>4001</stopPort>
						<stopKey>stop</stopKey>
						<!-- Very important - run-forked ignores the webAppConfig and hence 
							the context path; this is supposedly the default but does not work -->
						<contextPath>/${project.artifactId}</contextPath>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<modules>
		<module>jwsur2-ch1</module>
		<module>jwsur2-ch2</module>
		<module>jwsur2-ch3</module>
		<module>jwsur2-ch4</module>
		<module>jax-ws-handlers</module>
		<module>jwsur2-ch5</module>
		<module>jwsur2-ch6</module>
	</modules>
</project>